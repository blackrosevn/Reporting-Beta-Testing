import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import os

# Import local modules
import database as db
import auth
import reports
import organizations
import excel_handler
import utils
import settings
import report_templates

# Initialize session state variables if they don't exist
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'user_role' not in st.session_state:
    st.session_state.user_role = None
if 'user_id' not in st.session_state:
    st.session_state.user_id = None
if 'user_org_id' not in st.session_state:
    st.session_state.user_org_id = None
if 'username' not in st.session_state:
    st.session_state.username = None

# Page configuration
st.set_page_config(
    page_title="Vinatex Report Portal",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Function definitions for dashboard displays
def display_dashboard():
    st.title("T·ªïng quan b√°o c√°o")
    
    # Display different dashboards based on user role
    if st.session_state.user_role == "admin":
        admin_dashboard()
    elif st.session_state.user_role == "department":
        department_dashboard()
    elif st.session_state.user_role == "unit":
        unit_dashboard()

def admin_dashboard():
    # Create columns for metrics
    col1, col2, col3, col4 = st.columns(4)
    
    # Fetch statistics from database
    total_reports = db.get_total_reports()
    pending_reports = db.get_reports_by_status("pending")
    completed_reports = db.get_reports_by_status("completed")
    overdue_reports = db.get_reports_by_status("overdue")
    
    # Display metrics with icons
    with col1:
        st.markdown("### T·ªïng s·ªë b√°o c√°o")
        st.markdown(f"<div style='text-align: center; font-size: 48px;'>üìÑ {total_reports['assigned']}</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("### B√°o c√°o ƒë√£ n·ªôp")
        st.markdown(f"<div style='text-align: center; color: #28a745; font-size: 48px;'>‚úì {completed_reports}</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("### B√°o c√°o n·ªôp mu·ªôn")
        st.markdown(f"<div style='text-align: center; color: #ffc107; font-size: 48px;'>‚ö†Ô∏è {0}</div>", unsafe_allow_html=True)
    
    with col4:
        st.markdown("### B√°o c√°o qu√° h·∫°n")
        st.markdown(f"<div style='text-align: center; color: #dc3545; font-size: 48px;'>‚ö†Ô∏è {overdue_reports}</div>", unsafe_allow_html=True)
    
    # Progress chart section
    st.markdown("## Ti·∫øn ƒë·ªô n·ªôp b√°o c√°o theo ƒë∆°n v·ªã")
    
    # Create sample data for the progress chart
    org_data = db.get_report_by_organization()
    if org_data is not None and not org_data.empty:
        # Convert to the format needed for dual-axis chart
        chart_data = []
        for org_name in org_data['organization'].unique():
            org_df = org_data[org_data['organization'] == org_name]
            total = org_df['count'].sum()
            completed = org_df[org_df['status'] == 'completed']['count'].sum() if 'completed' in org_df['status'].values else 0
            completion_rate = (completed / total * 100) if total > 0 else 0
            chart_data.append({
                'organization': org_name,
                'ƒê√£ n·ªôp': completed,
                'Ch∆∞a n·ªôp': total - completed,
                'T·ªâ l·ªá ho√†n th√†nh': completion_rate
            })
        
        chart_df = pd.DataFrame(chart_data)
        
        # Create a combined chart
        fig = px.bar(
            chart_df,
            x='organization',
            y=['ƒê√£ n·ªôp', 'Ch∆∞a n·ªôp'],
            barmode='stack',
            color_discrete_map={
                'ƒê√£ n·ªôp': '#0066b2',
                'Ch∆∞a n·ªôp': '#e0e0e0'
            },
            labels={'value': 'S·ªë b√°o c√°o', 'organization': 'ƒê∆°n v·ªã', 'variable': 'Tr·∫°ng th√°i'}
        )
        
        # Add line chart for completion rate
        completion_rate = px.line(
            chart_df,
            x='organization',
            y='T·ªâ l·ªá ho√†n th√†nh',
            color_discrete_sequence=['#28a745']
        ).data[0]
        
        fig.add_trace(completion_rate)
        
        # Configure y-axes
        fig.update_layout(
            yaxis=dict(title='S·ªë b√°o c√°o'),
            yaxis2=dict(title='T·ªâ l·ªá ho√†n th√†nh (%)', overlaying='y', side='right', range=[0, 100]),
            legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)
        )
        
        # Display the chart
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o theo ƒë∆°n v·ªã")
    
    # Recent activity
    st.markdown("## Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y")
    recent_activity = db.get_recent_activity()
    if recent_activity is not None and not recent_activity.empty:
        st.dataframe(recent_activity, use_container_width=True)
    else:
        st.info("Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o")
    
    # Reports by due date
    st.markdown("## Qu·∫£n l√Ω b√°o c√°o theo h·∫°n n·ªôp")
    
    # Create tabs for different report statuses
    tab1, tab2 = st.tabs(["B√°o c√°o s·∫Øp ƒë·∫øn h·∫°n", "B√°o c√°o ƒë√£ h·∫øt h·∫°n"])
    
    with tab1:
        # Display upcoming reports
        upcoming_reports = db.get_assigned_reports()
        if upcoming_reports is not None and not upcoming_reports.empty:
            upcoming_df = upcoming_reports[upcoming_reports['status'] == 'pending']
            if not upcoming_df.empty:
                # Format the dataframe for display
                upcoming_df = upcoming_df[['report_name', 'organization', 'due_date', 'status']]
                upcoming_df.columns = ['T√™n b√°o c√°o', 'ƒê∆°n v·ªã', 'Ng√†y h·∫øt h·∫°n', 'Tr·∫°ng th√°i']
                upcoming_df['Tr·∫°ng th√°i'] = upcoming_df['Tr·∫°ng th√°i'].map({
                    'pending': 'Ch∆∞a n·ªôp',
                    'completed': 'ƒê√£ n·ªôp',
                    'overdue': 'Qu√° h·∫°n'
                })
                st.dataframe(upcoming_df, use_container_width=True)
            else:
                st.info("Kh√¥ng c√≥ b√°o c√°o s·∫Øp ƒë·∫øn h·∫°n")
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o")
    
    with tab2:
        # Display overdue reports
        overdue_reports = db.get_assigned_reports()
        if overdue_reports is not None and not overdue_reports.empty:
            overdue_df = overdue_reports[overdue_reports['status'] == 'overdue']
            if not overdue_df.empty:
                # Format the dataframe for display
                overdue_df = overdue_df[['report_name', 'organization', 'due_date', 'status']]
                overdue_df.columns = ['T√™n b√°o c√°o', 'ƒê∆°n v·ªã', 'Ng√†y h·∫øt h·∫°n', 'Tr·∫°ng th√°i']
                overdue_df['Tr·∫°ng th√°i'] = 'Qu√° h·∫°n'
                st.dataframe(overdue_df, use_container_width=True)
            else:
                st.info("Kh√¥ng c√≥ b√°o c√°o qu√° h·∫°n")
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o")

def department_dashboard():
    st.subheader("T·ªïng quan ph√≤ng ban")
    
    # Create columns for metrics
    col1, col2, col3 = st.columns(3)
    
    # Fetch statistics from database for this department
    dept_id = st.session_state.user_org_id
    dept_reports = db.get_department_reports(dept_id)
    pending_reports = db.get_department_reports_by_status(dept_id, "pending")
    completed_reports = db.get_department_reports_by_status(dept_id, "completed")
    
    # Display metrics
    with col1:
        st.markdown("### T·ªïng s·ªë b√°o c√°o")
        st.markdown(f"<div style='text-align: center; font-size: 48px;'>üìÑ {dept_reports}</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("### B√°o c√°o ƒë√£ n·ªôp")
        st.markdown(f"<div style='text-align: center; color: #28a745; font-size: 48px;'>‚úì {completed_reports}</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("### B√°o c√°o ch∆∞a n·ªôp")
        st.markdown(f"<div style='text-align: center; color: #ffc107; font-size: 48px;'>‚ö†Ô∏è {pending_reports}</div>", unsafe_allow_html=True)
    
    # Report submission status chart
    st.markdown("## Tr·∫°ng th√°i n·ªôp b√°o c√°o")
    status_data = db.get_department_report_status(dept_id)
    if status_data is not None and not status_data.empty:
        fig = px.pie(
            status_data, 
            values='count', 
            names='status', 
            color='status',
            color_discrete_map={
                'completed': '#28a745',
                'pending': '#ffc107',
                'overdue': '#dc3545'
            },
            labels={
                'status': 'Tr·∫°ng th√°i',
                'count': 'S·ªë l∆∞·ª£ng'
            }
        )
        
        # Map status names to Vietnamese
        fig.update_traces(
            labels=['ƒê√£ n·ªôp' if label == 'completed' else 'Ch∆∞a n·ªôp' if label == 'pending' else 'Qu√° h·∫°n' for label in fig.data[0].labels]
        )
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫°ng th√°i b√°o c√°o")
    
    # Recent submissions
    st.markdown("## N·ªôp b√°o c√°o g·∫ßn ƒë√¢y")
    recent_submissions = db.get_department_recent_submissions(dept_id)
    if recent_submissions is not None and not recent_submissions.empty:
        # Rename columns to Vietnamese
        recent_submissions.columns = ['ƒê∆°n v·ªã', 'B√°o c√°o', 'Th·ªùi gian n·ªôp']
        st.dataframe(recent_submissions, use_container_width=True)
    else:
        st.info("Kh√¥ng c√≥ b√°o c√°o ƒë∆∞·ª£c n·ªôp g·∫ßn ƒë√¢y")

def unit_dashboard():
    st.subheader("T·ªïng quan b√°o c√°o c·ªßa ƒë∆°n v·ªã")
    
    # Create columns for metrics
    col1, col2, col3 = st.columns(3)
    
    # Fetch statistics from database for this unit
    unit_id = st.session_state.user_org_id
    assigned_reports = db.get_unit_assigned_reports(unit_id)
    completed_reports = db.get_unit_reports_by_status(unit_id, "completed")
    pending_reports = db.get_unit_reports_by_status(unit_id, "pending")
    
    # Display metrics
    with col1:
        st.markdown("### T·ªïng s·ªë b√°o c√°o")
        st.markdown(f"<div style='text-align: center; font-size: 48px;'>üìÑ {assigned_reports}</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("### B√°o c√°o ƒë√£ n·ªôp")
        st.markdown(f"<div style='text-align: center; color: #28a745; font-size: 48px;'>‚úì {completed_reports}</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("### B√°o c√°o ch∆∞a n·ªôp")
        st.markdown(f"<div style='text-align: center; color: #ffc107; font-size: 48px;'>‚ö†Ô∏è {pending_reports}</div>", unsafe_allow_html=True)
    
    # Report due dates
    st.markdown("## B√°o c√°o s·∫Øp ƒë·∫øn h·∫°n")
    upcoming_reports = db.get_unit_upcoming_reports(unit_id)
    if upcoming_reports is not None and not upcoming_reports.empty:
        # Rename columns to Vietnamese
        upcoming_reports.columns = ['ID', 'T√™n b√°o c√°o', 'H·∫°n n·ªôp', 'Tr·∫°ng th√°i']
        # Map status to Vietnamese
        upcoming_reports['Tr·∫°ng th√°i'] = upcoming_reports['Tr·∫°ng th√°i'].map({
            'pending': 'Ch∆∞a n·ªôp',
            'completed': 'ƒê√£ n·ªôp',
            'overdue': 'Qu√° h·∫°n'
        })
        # Remove ID column for display
        upcoming_reports_display = upcoming_reports.drop(columns=['ID'])
        st.dataframe(upcoming_reports_display, use_container_width=True)
    else:
        st.info("Kh√¥ng c√≥ b√°o c√°o s·∫Øp ƒë·∫øn h·∫°n")
    
    # Action needed reports
    st.markdown("## B√°o c√°o c·∫ßn x·ª≠ l√Ω")
    action_needed = db.get_unit_action_needed_reports(unit_id)
    if action_needed is not None and not action_needed.empty:
        for _, report in action_needed.iterrows():
            with st.expander(f"{report['report_name']} - H·∫°n n·ªôp: {report['due_date']}"):
                st.write(f"**M√¥ t·∫£:** {report['description']}")
                st.write(f"**Tr·∫°ng th√°i:** {'Ch∆∞a n·ªôp' if report['status'] == 'pending' else 'Qu√° h·∫°n' if report['status'] == 'overdue' else 'ƒê√£ n·ªôp'}")
                
                # Add submission button
                if st.button(f"N·ªôp b√°o c√°o", key=f"submit_{report['id']}"):
                    st.session_state.current_report = report['id']
                    st.session_state.current_report_name = report['report_name']
                    st.rerun()
    else:
        st.info("Kh√¥ng c√≥ b√°o c√°o c·∫ßn x·ª≠ l√Ω")

# Authentication
if not st.session_state.authenticated:
    auth.login_page()
else:
    # Main application
    st.sidebar.title("Vinatex Report Portal")
    
    # Sidebar menu with icons
    st.sidebar.markdown("---")
    menu_options = {
        "T·ªïng quan": "üìä",
        "Qu·∫£n l√Ω m·∫´u b√°o c√°o": "üìù", 
        "ƒê∆°n v·ªã v√† th√†nh vi√™n": "üè¢",
        "B·∫£n ch·ª©c nƒÉng": "üìà",
        "Qu·∫£n l√Ω ng∆∞·ªùi d√πng": "üë•",
        "C√†i ƒë·∫∑t": "‚öôÔ∏è"
    }
    
    # Create the menu with icons
    menu_items = []
    for option, icon in menu_options.items():
        menu_items.append(f"{icon} {option}")
    
    selected_menu = st.sidebar.radio("", menu_items)
    
    # Extract the actual option name without the icon
    selected_option = selected_menu.split(" ", 1)[1]
    
    # Map selected option to pages
    page_mapping = {
        "T·ªïng quan": "Dashboard",
        "Qu·∫£n l√Ω m·∫´u b√°o c√°o": "Report Templates",
        "ƒê∆°n v·ªã v√† th√†nh vi√™n": "Organizations",
        "B·∫£n ch·ª©c nƒÉng": "Assign Reports",
        "Qu·∫£n l√Ω ng∆∞·ªùi d√πng": "Users",
        "C√†i ƒë·∫∑t": "Settings"
    }
    
    page = page_mapping.get(selected_option, "Dashboard")
    
    # Display the page content
    if page == "Dashboard":
        display_dashboard()
    elif page == "Report Templates":
        reports.manage_report_templates()
    elif page == "Assign Reports":
        reports.assign_reports()
    elif page == "My Reports":
        reports.view_my_reports()
    elif page == "Submit Report":
        reports.submit_report()
    elif page == "Report Status":
        reports.view_report_status()
    elif page == "Organizations":
        organizations.manage_organizations()
    elif page == "Users":
        auth.manage_users()
    elif page == "Settings":
        st.warning("Ch·ª©c nƒÉng c√†i ƒë·∫∑t ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn")
    else:
        st.warning("Trang kh√¥ng t√¨m th·∫•y")
    
    # Add user information at the bottom of the sidebar
    st.sidebar.markdown("---")
    st.sidebar.write(f"Admin Vinatex")
    st.sidebar.write(f"Quy·ªÅn truy c·∫≠p: {st.session_state.user_role}")
    
    # Logout button
    if st.sidebar.button("ƒêƒÉng xu·∫•t"):
        auth.logout()
        st.rerun()

if __name__ == "__main__":
    # Ensure database connection is established
    db.initialize_connection()
    
    # Initialize database if needed
    import setup_database
    setup_database.initialize_database()